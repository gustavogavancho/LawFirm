@page "/client/search/{searchTerm}"

@attribute [Authorize]

@inject IClientDataService ClientDataService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<PageTitle>Client Search - LawFirm</PageTitle>

@if (showConfirmationDialog)
{
    <YesNoModal Message="Do you want to delete this item?" OnConfirmation="HandleConfirmation" />
}

<SimpleNavigation BasePageRef="client" BasePage="Client" CurrentPage="Search" />

@if (clients is null)
{
    <p>Loading...</p>
}
else
{
    @if (clients.Any())
    {
        <div class="responsive-table">
            <TableView Items="clients" Context="client">
                <HeaderTemplate>
                    <th>Client Type</th>
                    <th>Firt Name</th>
                    <th>Last Name</th>
                    <th>Nit</th>
                    <th>Business Name</th>
                    <th>Representative</th>
                    <th></th>
                </HeaderTemplate>
                <RowTemplate>
                    <th scope="col">@client.ClientType</th>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Nit</td>
                    <td>@client.BusinessName</td>
                    <td>@client.Representative</td>
                    <td class="text-end">
                        <AuthorizeView>
                            <button title="Details" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/client/{client.Id}"))">
                                <i class="bi bi-list-task"></i>
                            </button>
                            <button title="Edit" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/client-upsert/{client.Id}"))">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button title="Delete" class="btn btn-danger" @onclick="@(() => ShowConfirmationModal(client.Id))">
                                <i class="bi bi-trash3"></i>
                            </button>
                        </AuthorizeView>
                    </td>
                </RowTemplate>
            </TableView>
        </div>
    }
    else
    {
        <NoItemsRedirect NoItemsMessage="You don't have any clients" RefPage="client-upsert" RefPageText="why not add one?" />
    }
}

<div class="mt-2 mb-1">
    <div class="row">
        <div class="offset-4 col-8 text-end">
            <button class="btn btn-secondary" type="button" @onclick="@(() => Navigation.NavigateTo("client"))">Go back</button>
        </div>
    </div>
</div>

@code {
    [Parameter] 
    public string SearchTerm { get; set; }

    private bool showConfirmationDialog;
    private Guid clientId;
    private ICollection<ClientVm> clients;

    protected override async Task OnInitializedAsync()
    {
        await GetClients();
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                await ClientDataService.DeleteClient(clientId);
                showConfirmationDialog = false;
                await GetClients();
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The Client has been deleted successfully!");
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
            }

        }
        showConfirmationDialog = false;
    }

    private async Task GetClients()
    {
        clients = await ClientDataService.FindClientsBySearchTerm(SearchTerm);
    }

    private void ShowConfirmationModal(Guid id)
    {
        clientId = id;
        showConfirmationDialog = true;
    }
}
