@page "/client"

@attribute [Authorize]

@inject IClientDataService ClientDataService
@inject NavigationManager Navigation

<PageTitle>Clients - LawFirm</PageTitle>

@if (showConfirmationDialog)
{
    <YesNoModal Message="Do you want to delete this item?" OnConfirmation="HandleConfirmation" />
}

<div class="alert alert-secondary">
    <span class="bi bi-plus-square-fill" aria-hidden="true"></span>
    <strong>Do you want to create a new client?</strong>
    <span class="text-nowrap">
        Please
        <a class="font-weight-bold link-dark" href="client-upsert">Add it here.</a>
    </span>
</div>

<div class="jumbotron">
    <p class="mt-4">
        <input @bind="searchTerm"
        @onkeydown="SearchForTicket"
        @bind:event="oninput"
        @ref=myInput
               type="text"
               placeholder="Search for a client..."
               class="form-control form-control-lg" />
    </p>
</div>

@if (submitSuccessful)
{
    <Alert Message="The user has been deleted successfully!" AlertType="success" />
}
else if (errorMessage is not null)
{
    <Alert Message="@errorMessage" AlertType="danger" />
}


@if (ClientList is null)
{
    <p>Loading...</p>
}
else
{
    @if (ClientList.Any())
    {
        <div class="responsive-table">
            <TableView Items="ClientList" Context="client">
                <HeaderTemplate>
                    <th>Client Type</th>
                    <th>Firt Name</th>
                    <th>Last Name</th>
                    <th>Nit</th>
                    <th>Business Name</th>
                    <th>Representative</th>
                    <th></th>
                </HeaderTemplate>
                <RowTemplate>
                    <th scope="col">@client.ClientType</th>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Nit</td>
                    <td>@client.BusinessName</td>
                    <td>@client.Representative</td>
                    <td class="text-end">
                        <AuthorizeView>
                            <button title="Details" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/client/{client.Id}"))">
                                <i class="bi bi-list-task"></i>
                            </button>
                            <button title="Edit" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/client-upsert/{client.Id}"))">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button title="Delete" class="btn btn-danger" @onclick="@(() => ShowConfirmationModal(client.Id))">
                                <i class="bi bi-trash3"></i>
                            </button>
                        </AuthorizeView>
                    </td>
                </RowTemplate>
            </TableView>
        </div>
        <div class="row mt-3">
            <div class="col">
                <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
            </div>
        </div>
    }
    else
    {
        <div class="no-items">
            <svg viewBox="0 0 16 16" class="bi bi-tree" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M8 0a.5.5 0 0 1 .416.223l3 4.5A.5.5 0 0 1 11 5.5h-.098l2.022 3.235a.5.5 0 0 1-.424.765h-.191l1.638 3.276a.5.5 0 0 1-.447.724h-11a.5.5 0 0 1-.447-.724L3.69 9.5H3.5a.5.5 0 0 1-.424-.765L5.098 5.5H5a.5.5 0 0 1-.416-.777l3-4.5A.5.5 0 0 1 8 0zM5.934 4.5H6a.5.5 0 0 1 .424.765L4.402 8.5H4.5a.5.5 0 0 1 .447.724L3.31 12.5h9.382l-1.638-3.276A.5.5 0 0 1 11.5 8.5h.098L9.576 5.265A.5.5 0 0 1 10 4.5h.066L8 1.401 5.934 4.5z" />
                <path d="M7 13.5h2V16H7v-2.5z" />
            </svg>
            <h3 class="text-muted font-weight-light">You don't have any clients, <a href="client-upsert">why not add one?</a></h3>
        </div>
    }
}

@code {

    private bool showConfirmationDialog;
    private Guid clientId;
    private bool submitSuccessful;
    private ElementReference myInput;
    private string searchTerm = "";
    private string errorMessage;

    public ICollection<ClientVm> ClientList { get; set; }
    public MetaData MetaData { get; set; } = new MetaData();
    public int PageNumber {get; set; } = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await GetClients();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await myInput.FocusAsync();
        }
    }

    private async Task SelectedPage(int page)
    {
        PageNumber = page;
        await GetClients();
    }

    private async Task GetClients()
    {
        var pagingReponse = await ClientDataService.GetClients(PageNumber, pageSize);
        ClientList = pagingReponse.Items;
        MetaData = pagingReponse.MetaData;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            await ClientDataService.DeleteClient(clientId);

            if (ClientList.Count() <= 1)
                PageNumber = (PageNumber <= 1) ? 1 : PageNumber - 1;

            showConfirmationDialog = false;
            await GetClients();
        }
        showConfirmationDialog = false;
    }

    private void ShowConfirmationModal(Guid id)
    {
        clientId = id;
        showConfirmationDialog = true;
    }

    private void SearchForTicket(KeyboardEventArgs args)
    {
        if (args.Key != "Enter") return;

        Navigation.NavigateTo($"/client/search/{searchTerm}");
    }
}
