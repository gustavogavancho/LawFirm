@page "/client-update/{id:guid}"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject IClientDataService ClientDataService
@inject IJSRuntime JsRuntime

<PageTitle>Update Client - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="client" BasePage="Client" CurrentPage="Update" />

<EditForm Model="client" OnValidSubmit="HandleValidSubmit">

    <FluentValidationValidator />

    <FormSection Title="Client Information"
                 HelpText="Refers to information or data about a customer or client.">

        <FormFieldSet Width="col-11">
            <label for="clientType" class="form-label text-muted fw-bold">Client Type</label>
            <InputSelect @bind-Value="client.ClientType" class="form-select" id="clientType">
                <option value=""></option>
                <option value="Natural Person">Natural Person</option>
                <option value="Legal Person">Legal Person</option>
            </InputSelect>
            <ValidationMessage For="@(() => client.ClientType)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="firstName" class="form-label text-muted fw-bold">First Name</label>
            <InputText @bind-Value="client.FirstName" class=" form-control" id="firstName" disabled="@(client.ClientType == "Legal Person")" />
            <ValidationMessage For="@(() => client.FirstName)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="lastName" class="form-label text-muted fw-bold">Last Name</label>
            <InputText @bind-Value="client.LastName" class=" form-control" id="lastName" disabled="@(client.ClientType == "Legal Person")" />
            <ValidationMessage For="@(() => client.LastName)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="businessName" class="form-label text-muted fw-bold">Business Name</label>
            <InputText @bind-Value="client.BusinessName" class=" form-control" id="businessName" disabled="@(client.ClientType == "Natural Person")" />
            <ValidationMessage For="@(() => client.BusinessName)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="nit" class="form-label text-muted fw-bold">Nit</label>
            <InputNumber @bind-Value="client.Nit" class=" form-control" id="nit" />
            <ValidationMessage For="@(() => client.Nit)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="representative" class="form-label text-muted fw-bold">Representative</label>
            <InputText @bind-Value="client.Representative" class=" form-control" id="representative" disabled="@(client.ClientType == "Natural Person")" />
            <ValidationMessage For="@(() => client.Representative)" />
        </FormFieldSet>

    </FormSection>

    <FormSection Title="Contact Details"
                 HelpText="Information or data that allows individuals or entities to get in touch with a person, organization, or business.">
        <FormFieldSet Width="col-11">
            <label for="phoneNumber" class="form-label text-muted fw-bold">Phone Number</label>
            <InputNumber @bind-Value="client.PhoneNumber" class=" form-control" id="phoneNumber" />
            <ValidationMessage For="@(() => client.PhoneNumber)" />
        </FormFieldSet>
        <FormFieldSet Width="col-11">
            <label for="address" class="form-label text-muted fw-bold">Address</label>
            <InputText @bind-Value="client.Address" class=" form-control" id="address" />
            <ValidationMessage For="@(() => client.Address)" />
        </FormFieldSet>
        <FormFieldSet Width="col-11">
            <label for="email" class="form-label text-muted fw-bold">Email</label>
            <InputText @bind-Value="client.Email" class=" form-control" id="email" />
            <ValidationMessage For="@(() => client.Email)" />
        </FormFieldSet>
    </FormSection>

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Navigation.NavigateTo("client"))">Cancel</button>
            </div>
        </div>
    </div>

</EditForm>


@code {
    [Parameter]
    public Guid Id { get; set; }

    private UpdateClientCommand client = new();

    protected async override Task OnInitializedAsync()
    {
        var response = await ClientDataService.GetClient(Id);

        client.Email = response.Email;
        client.Representative = response.Representative;
        client.Address = response.Address;
        client.PhoneNumber = response.PhoneNumber;
        client.Nit = response.Nit;
        client.BusinessName = response.BusinessName;
        client.LastName = response.LastName;
        client.FirstName = response.FirstName;
        client.ClientType = response.ClientType;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await ClientDataService.UpdateClient(Id, client);

            await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The client has been updated successfully!");
        }
        catch (ApiException)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
        }
        finally
        {
            await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
        }
    }
}
