@page "/user-add"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JsRuntime

<PageTitle>Add User - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="user" BasePage="User" CurrentPage="Add User" />

<EditForm Model="userViewModel" OnValidSubmit="HandleValidSubmit">

    <FluentValidationValidator />

    <FormSection Title="User details" HelpText="A person or entity that engages with a product, service, or system in some way, such as by using it, interacting with it, or consuming it.">
        <FormFieldSet Width="col-11">
            <label for="firstName" class="form-label text-muted fw-bold">First Name</label>
            <InputText @bind-Value="userViewModel.FirstName" class=" form-control" id="firstName" />
            <ValidationMessage For="@(() => userViewModel.FirstName)" />
        </FormFieldSet>
        <FormFieldSet Width="col-11">
            <label for="lastName" class="form-label text-muted fw-bold">Last Name</label>
            <InputText @bind-Value="userViewModel.LastName" class=" form-control" id="lastName" />
            <ValidationMessage For="@(() => userViewModel.LastName)" />
        </FormFieldSet>
        <FormFieldSet Width="col-11">
            <label for="email" class="form-label text-muted fw-bold">Email</label>
            <InputText @bind-Value="userViewModel.Email" class=" form-control" id="email" />
            <ValidationMessage For="@(() => userViewModel.Email)" />
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Credentials" HelpText="verification of identity or tools for authentication.">
        <FormFieldSet Width="col-11">
            <label for="userName" class="form-label text-muted fw-bold">User Name</label>
            <InputText @bind-Value="userViewModel.UserName" class=" form-control" id="userName" />
            <ValidationMessage For="@(() => userViewModel.UserName)" />
        </FormFieldSet>
        <FormFieldSet Width="col-11">
            <label for="password" class="form-label text-muted fw-bold">Password</label>
            <InputText type="password" @bind-Value="userViewModel.Password" class=" form-control" id="password" />
            <ValidationMessage For="@(() => userViewModel.Password)" />
        </FormFieldSet>
        <FormFieldSet Width="col-11">
            <label for="confirmPassword" class="form-label text-muted fw-bold">Confirm Password</label>
            <InputText type="password" @bind-Value="userViewModel.ConfirmPassword" class=" form-control" id="confirmPassword" />
            <ValidationMessage For="@(() => userViewModel.ConfirmPassword)" />
        </FormFieldSet>
    </FormSection>

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="HandleCancel">Cancel</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private UserViewModel userViewModel = new UserViewModel();

    private async Task HandleValidSubmit()
    {
        try
        {
            if (await AuthenticationService.Register(userViewModel.FirstName, userViewModel.LastName, userViewModel.UserName, userViewModel.Email, userViewModel.Password))
            {
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The user has been added successfully!");
                userViewModel = new();
            }
        }
        catch (ApiException)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
        }
        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }

    private void HandleCancel()
    {
        Navigation.NavigateTo("user");
    }
}