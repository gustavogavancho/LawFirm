@page "/user"

@attribute [Authorize]

@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<PageTitle>User - Law Firm</PageTitle>

@if (showConfirmationDialog)
{
    <YesNoModal Message="Do you want to delete this item?" OnConfirmation="HandleConfirmation" />
}

<SimpleIndexBar RefText="Do you want to create a new user?" ComplementText="Please" RefPage="user-add" RefPageDescription="Add it here." />

@if (userList is null)
{
    <p>Loading...</p>
}
else
{
    @if (userList.Any())
    {
        <div class="responsive-table">
            <TableView Items="userList" Context="user">
                <HeaderTemplate>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Username</th>
                    <th></th>
                </HeaderTemplate>
                <RowTemplate>
                    <th scope="col">@user.FirstName</th>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.UserName</td>
                    <td class="text-end">
                        <AuthorizeView>
                            <button title="Edit" class="btn btn-primary btn-sm" @onclick="@(() => Navigation.NavigateTo($"/user-password/{user.Id}"))">
                                <i class="bi bi-shield-lock-fill"></i>
                            </button>
                            <button title="Delete" class="btn btn-danger btn-sm" @onclick="@(() => ShowConfirmationModal(user.Id))">
                                <i class="bi bi-trash3"></i>
                            </button>
                        </AuthorizeView>
                    </td>
                </RowTemplate>
            </TableView>
        </div>
    }
    else
    {
        <NoItemsRedirect NoItemsMessage="You don't have any users" RefPage="user-add" RefPageText="why not add one?" />
    }
}


@code {
    private List<UserListViewModel> userList;
    private Guid userIdSelected;
    private bool showConfirmationDialog;

    public async Task GetUsersAsync()
    {
        userList = await AuthenticationService.GetUsers();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsersAsync();
    }

    private void ShowConfirmationModal(Guid id)
    {
        userIdSelected = id;
        showConfirmationDialog = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                await AuthenticationService.DeleteUser(userIdSelected);
                await GetUsersAsync();
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The user has been deleted successfully!");
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
            }
        }

        showConfirmationDialog = false;
    }
}