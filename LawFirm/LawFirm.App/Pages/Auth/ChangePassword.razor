@page "/user-password/{id}"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Shared.Resources.Resource> localizer

<PageTitle>@(localizer["User"]) - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="user" BasePage="@(localizer["User"])" CurrentPage="@(localizer["ChangePassword"])" />

<EditForm Model="changePasswordViewModel" OnValidSubmit="HandleValidSubmit">

    <FluentValidationValidator />

    <FormSection Title="@localizer["ChangePassword"]"
                 HelpText="@localizer["ChangePasswordDescription"]">

        <FormFieldSet Width="col-11">
            <label for="password" class="form-label text-muted fw-bold">@localizer["Password"]</label>
            <InputText type="password" @bind-Value="changePasswordViewModel.Password" class=" form-control" id="password" />
            <ValidationMessage For="@(() => changePasswordViewModel.Password)" />
        </FormFieldSet>

        <FormFieldSet Width="col-11">
            <label for="confirmPassword" class="form-label text-muted fw-bold">@localizer["ConfirmPassword"]</label>
            <InputText type="password" @bind-Value="changePasswordViewModel.ConfirmPassword" class=" form-control" id="confirmPassword" />
            <ValidationMessage For="@(() => changePasswordViewModel.ConfirmPassword)" />
        </FormFieldSet>

    </FormSection>

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">@localizer["Submit"]</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="HandleCancel">@localizer["Cancel"]</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter] 
    public string Id { get; set; }
    
    private ChangePasswordViewModel changePasswordViewModel = new ();

    private async Task HandleValidSubmit()
    {
        try
        {
            changePasswordViewModel.Id = Id;
            await AuthenticationService.ChangePassword(changePasswordViewModel);
            changePasswordViewModel = new();
            await JsRuntime.InvokeVoidAsync("showSuccessToastr", localizer["PasswordChangedSuccessfully"].ToString());
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", localizer["GenericError"].ToString());
        }

        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }

    private void HandleCancel()
    {
        Navigation.NavigateTo("user");
    }
}