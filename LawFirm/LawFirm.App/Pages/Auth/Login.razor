@page "/login"

@layout AuthLayout

<div class="d-flex align-items-center justify-content-center" style="min-height: 100vh;">
    <div class="card p-4 shadow" style="width: 400px;">
        <h2 class="text-center mb-4">Login</h2>
        <EditForm Model="@LoginViewModel" OnValidSubmit="HandleValidSubmit">
            <FluentValidationValidator />

            <p class="text-center text-danger">@Message</p>

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="LoginViewModel.Email" />
                <ValidationMessage For="(()=>LoginViewModel.Email)"></ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="@LoginViewModel.Password" />
                <ValidationMessage For="(()=>LoginViewModel.Password)"></ValidationMessage>
            </div>
            <div class="d-flex justify-content-center mb-2">
                <button class="btn btn-primary" disabled="@IsLoading">Login</button>
            </div>
        </EditForm>
        @if (IsLoading)
        {
            <SmallProgressBar />
        }
    </div>
</div>

@code {

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    private IAuthenticationService AuthenticationService { get; set; }

    public LoginViewModel LoginViewModel { get; set; }

    public string Message { get; set; }
    public string ReturnUrl { get; set; }
    public bool IsLoading { get; set; }
    public string ProgressWidth => IsLoading ? "100%" : "0%";

    protected override void OnInitialized()
    {
        LoginViewModel = new LoginViewModel();
    }

    protected async void HandleValidSubmit()
    {
        IsLoading = true;

        StateHasChanged();

        if (await AuthenticationService.Authenticate(LoginViewModel.Email, LoginViewModel.Password))
        {
            //regiration is successful
            var absoluteUri = new Uri(NavigationManager.Uri);
            var queryParam = HttpUtility.ParseQueryString(absoluteUri.Query);
            ReturnUrl = queryParam["returnUrl"];
            if (string.IsNullOrEmpty(ReturnUrl))
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                NavigationManager.NavigateTo("/" + ReturnUrl);
            }

            //NavigationManager.NavigateTo("home");
        }
        Message = "Username/password combination unknown";
        IsLoading = false;
        StateHasChanged();
    }
}