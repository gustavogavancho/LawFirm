@page "/event-update/{id:guid}"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject IEventDataService EventDataService
@inject IJSRuntime JsRuntime

<PageTitle>Update Event - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="event" BasePage="Event" CurrentPage="Update Event" />

<EditForm Model="caseEvent" OnValidSubmit="HandleValidSubmit">

    <FluentValidationValidator />

    <EventForm Event="caseEvent" />

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="GoBack">Cancel</button>
                @* <button class="btn btn-outline-secondary" type="button" @onclick="GoBack">Cancel</button> *@
            </div>
        </div>
    </div>

</EditForm>


@code {
    [Parameter]
    public Guid Id { get; set; }

    private EventVm caseEvent = new();

    protected async override Task OnInitializedAsync()
    {
        caseEvent = await EventDataService.GetEvent(Id);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await EventDataService.UpdateEvent(Id, caseEvent);

            await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The event has been updated successfully!");
        }
        catch (ApiException)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
        }

        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }
}
