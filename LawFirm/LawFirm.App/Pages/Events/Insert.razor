@page "/case-event-insert/{caseId:guid}"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject IEventDataService EventDataService
@inject IJSRuntime JsRuntime

<PageTitle>Insert Event - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="case" BasePage="Case" CurrentPage="Insert Event" />

<EditForm Model="caseEvent" OnValidSubmit="HandleValidSubmit">

    <FluentValidationValidator />

    <EventForm Event="caseEvent" />

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Navigation.NavigateTo("case"))">Cancel</button>
            </div>
        </div>
    </div>

</EditForm>

@code {

    [Parameter] 
    public Guid CaseId { get; set; }

    private EventVm caseEvent = new();

    protected override void OnInitialized()
    {
        caseEvent.EventStartDate = DateTime.Now;
        caseEvent.EventEndDate = DateTime.Now;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            caseEvent.CaseId = CaseId;
            var eventCreated = await EventDataService.CreateEvent(caseEvent);

            if (eventCreated is not null)
            {
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The event has been added successfully!");
                caseEvent = new();
                caseEvent.EventStartDate = DateTime.Now;
                caseEvent.EventEndDate = DateTime.Now;
            }
        }
        catch (ApiException)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
        }

        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }
}
