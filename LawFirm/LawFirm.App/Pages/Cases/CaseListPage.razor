@page "/case"

@attribute [Authorize]

@inject ICaseDataService CaseDataService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<PageTitle>Cases - LawFirm</PageTitle>

@if (showConfirmationDialog)
{
    <YesNoModal Message="Do you want to delete this item?" OnConfirmation="HandleConfirmation" />
}

<SimpleIndexBar RefText="Do you want to create a new case?" ComplementText="Please" RefPage="case-insert" RefPageDescription="Add it here." />

@if (CaseList is null)
{
    <p>Loading...</p>
}
else
{
    @if (CaseList.Any())
    {
        <div class="responsive-table">
            <TableView Items="CaseList" Context="caseEntity">
                <HeaderTemplate>
                    <th>File Number</th>
                    <th></th>
                </HeaderTemplate>
                <RowTemplate>
                    <th scope="col">@caseEntity.FileNumber</th>
                    <td class="text-end">
                        <AuthorizeView>
                            <Authorized>
                                <button title="Details" class="btn btn-primary btn-sm" @onclick="@(() => Navigation.NavigateTo($"/case-detail/{caseEntity.Id}"))">
                                    <i class="bi bi-list-task"></i>
                                </button>
                                <button title="Edit" class="btn btn-primary btn-sm" @onclick="@(() => Navigation.NavigateTo($"/case-upsert/{caseEntity.Id}"))">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button title="Delete" class="btn btn-danger btn-sm" @onclick="@(() => ShowConfirmationModal(caseEntity.Id))">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                </RowTemplate>
            </TableView>
        </div>
    }
    else
    {
        <NoItemsRedirect NoItemsMessage="You don't have any cases" RefPage="client-upsert" RefPageText="why not add one?"/>
    }
}

@code {
    private bool showConfirmationDialog;
    private Guid caseId;


    public ICollection<CaseVm> CaseList { get; set; }


    protected override async Task OnInitializedAsync()
    {
        CaseList = await CaseDataService.GetAllCases();
    }

    private void ShowConfirmationModal(Guid id)
    {
        caseId = id;
        showConfirmationDialog = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                await CaseDataService.DeleteCase(caseId);

                await GetCases();
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The Case has been deleted successfully!");

            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
            }
        }
        showConfirmationDialog = false;
    }

    private async Task GetCases()
    {
        CaseList = await CaseDataService.GetAllCases();
    }
}
