@page "/case-update/{id:guid}"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject ICaseDataService CaseDataService
@inject IJSRuntime JsRuntime

<PageTitle>Upsert Case - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="case" BasePage="Case" CurrentPage="Update Case" />

@if(caseEntity is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="caseEntity" OnValidSubmit="HandleValidSubmit">

        <FluentValidationValidator />

        <ClientSelectionForm Case="caseEntity" />

        <CounterPartsForm Case="caseEntity" />

        <CaseDetailsForm Case="caseEntity" />

        <CaseEventsForm Case="caseEntity" />

        <CaseFilesForm />

        <div class="mt-4 mb-2">
            <div class="row">
                <div class="offset-4 col-8 text-end">
                    <button class="btn btn-primary" type="submit">Submit</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Navigation.NavigateTo("case"))">Cancel</button>
                </div>
            </div>
        </div>

    </EditForm>
}

@code {
    [Parameter] 
    public Guid Id { get; set; }

    private CaseVm caseEntity = new();

    protected async override Task OnInitializedAsync()
    {
        caseEntity = await CaseDataService.GetCase(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) return;
        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!caseEntity.Clients.Any())
            {
                await JsRuntime.InvokeVoidAsync("showWarningToastr", "You must select a client.");
                return;
            }

            if (!caseEntity.CounterParts.Any())
            {
                await JsRuntime.InvokeVoidAsync("showWarningToastr", "You must select a counter part.");
                return;
            }

            await CaseDataService.UpdateCase(caseEntity, caseEntity.Clients.Select(x => x.Id).ToList());

            await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The client has been updated successfully!");
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
        }
        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }
}
