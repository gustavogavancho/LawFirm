@inject IStorageService StorargeService
@inject IJSRuntime JsRuntime

<FormSection Title="Files" HelpText="Detailed, confidential case documents for legal review and analysis.">

    @if (isLoading)
    {
        <Loading />
    }

    @if (showConfirmationDialog)
    {
        <YesNoModal Message="Do you want to delete this file?" OnConfirmation="HandleConfirmation" />
    }

    <div class="mb-3">
        <InputFile id="fileInput" class="form-control" OnChange="HandleFileSelected" multiple />
    </div>
    <div>
        @if (files != null && files.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th width="80%">File Name</th>
                        <th width="20%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in files)
                    {
                        <tr style="align-items: center;">
                            <td>@file</td>
                            <td>
                                <button title="Download" type="button" class="btn btn-primary btn-sm" @onclick="(() => DownloadFile(file))">
                                    <i class="bi bi-download"></i>
                                </button>
                                <button title="Delete" type="button" class="btn btn-danger btn-sm" @onclick="(() => DeleteFile(file))">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No files found.</p>
        }
    </div>
</FormSection>

@code {
    [Parameter]
    public string FilePath { get; set; }

    private List<string> files;
    private bool isLoading;
    private bool showConfirmationDialog;
    private string fileToDelete;

    protected async override Task OnInitializedAsync()
    {
        if (FilePath is not null) await GetFiles();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        isLoading = true;

        var file = e.File;

        if (file != null)
        {
            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);

                var fileParameter = new FileParameter(stream, $"{FilePath}/{file.Name}", file.ContentType);

                await StorargeService.UploadFile(fileParameter);

                await GetFiles();

                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "File successfully uploaded!");
            }
            catch (IOException)
            {
                await JsRuntime.InvokeVoidAsync("showErrorToastr", "The file you are trying to upload is larger than our 10 MB limit.");
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    private async Task GetFiles()
    {
        try
        {
            files = await StorargeService.GetFiles(FilePath);
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Our team is fixing the storage issue; please retry later or contact support for assistance.");
        }
    }

    private async Task DownloadFile(string file)
    {
        try
        {
            var check = await StorargeService.DownloadFile(file);

            await JsRuntime.InvokeVoidAsync("blazorDownloadStream", file, check.Stream);


        }
        catch (Exception ex)
        {
            var check = ex.Message;
            var check2 = ex.InnerException;
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Our team is fixing the storage issue; please retry later or contact support for assistance.");
        }
    }

    private async Task DeleteFile(string file)
    {
        fileToDelete = file;
        showConfirmationDialog = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                await StorargeService.DeleteFile(fileToDelete);

                await GetFiles();

                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "File deleted successfully!");
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("showErrorToastr", "Our team is fixing the storage issue; please retry later or contact support for assistance.");
            }
        }

        showConfirmationDialog = false;
    }
}
