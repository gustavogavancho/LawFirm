@inject IStorageService StorargeService
@inject IJSRuntime JsRuntime

<FormSection Title="Files" HelpText="Detailed, confidential case documents for legal review and analysis.">
    <div class="mb-3">
        <InputFile id="fileInput" class="form-control" OnChange="HandleFileSelected" multiple />
    </div>
    <div>
        @if (files != null && files.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th width="80%">File Name</th>
                        <th width="20%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in files)
                    {
                        <tr>
                            <td>@file.Name</td>
                            <td>
                                <button title="Download" type="button" class="btn btn-primary btn-sm" @onclick="@(() => DownloadFile(file))">
                                    <i class="bi bi-download"></i>
                                </button>
                                <button title="Delete" type="button" class="btn btn-danger btn-sm" @onclick="@(() => DeleteFile(file))">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No files found.</p>
        }
    </div>
</FormSection>

@code {
    [Parameter]
    public string FilePath { get; set; }

    private List<FileMetadata> files;

    protected override async Task OnInitializedAsync()
    {
        files = new() { new FileMetadata { Name = "File1" }, new FileMetadata { Name = "File2" } };
    }

    private async Task UploadFile()
    {
        files = null;
    }

    private async Task DeleteFile(FileMetadata file)
    {
        files = null;
    }

    private void DownloadFile(FileMetadata file)
    {
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);

                var fileParameter = new FileParameter(stream, $"{FilePath}/{file.Name}", file.ContentType);

                await StorargeService.UploadFileAsync(fileParameter);
            }
            catch (IOException ex)
            {
                await JsRuntime.InvokeVoidAsync("showErrorToastr", "The file you are trying to upload is larger than our 10 MB limit.");
            }
        }
    }

    public class FileMetadata
    {
        public string Name { get; set; }
    }
}
