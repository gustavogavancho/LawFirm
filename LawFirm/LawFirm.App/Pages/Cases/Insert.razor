@page "/case-insert"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject ICaseDataService CaseDataService
@inject IJSRuntime JsRuntime

<PageTitle>Upsert Case - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="case" BasePage="Case" CurrentPage="Insert Case" />

<EditForm Model="caseEntity" OnValidSubmit="HandleValidSubmit">

    <FluentValidationValidator />

    <ClientSelectionForm Case="caseEntity" />

    <CounterPartsForm Case="caseEntity" />

    <CaseDetailsForm Case="caseEntity"/>

    <CaseChargesForm Case="caseEntity" />

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Navigation.NavigateTo("case"))">Cancel</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private CaseVm caseEntity = new();

    protected override void OnInitialized()
    {
        caseEntity.CounterParts = new List<CounterPartVm> { new() };
        caseEntity.Clients = new List<ClientVm>();
        caseEntity.Charges = new List<ChargeVm> { new() };
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!caseEntity.Clients.Any())
            {
                await JsRuntime.InvokeVoidAsync("showWarningToastr", "You must select a client.");
                return;
            }

            if (!caseEntity.CounterParts.Any())
            {
                await JsRuntime.InvokeVoidAsync("showWarningToastr", "You must select a counter part.");
                return;
            }

            var caseCreated = await CaseDataService.CreateCase(caseEntity, caseEntity.Clients.Select(x => x.Id).ToList());

            if (caseCreated is not null)
            {
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The client has been added successfully!");
                caseEntity = new();
                caseEntity.Clients = new List<ClientVm>();
                caseEntity.CounterParts = new List<CounterPartVm>() { new() };
                caseEntity.Charges = new List<ChargeVm> { new() };
            }
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
        }
        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }
}
