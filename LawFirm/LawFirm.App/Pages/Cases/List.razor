@page "/case"

@attribute [Authorize]

@inject ICaseDataService CaseDataService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<PageTitle>Cases - LawFirm</PageTitle>

@if (showConfirmationDialog)
{
    <YesNoModal Message="Do you want to delete this item?" OnConfirmation="HandleConfirmation" />
}

<SimpleIndexBar RefText="Do you want to create a new case?" ComplementText="Please" RefPage="case-insert" RefPageDescription="Add it here." />

<div class="jumbotron">
    <p class="mt-4">
        <input @bind="searchTerm"
               @onkeydown="SearchForCase"
               @bind:event="oninput"
               @ref=myInput
               type="text"
               placeholder="Search for a case..."
               class="form-control form-control-lg" />
    </p>
</div>

@if (CaseList is null)
{
    <p>Loading...</p>
}
else
{
    @if (CaseList.Any())
    {
        <div class="responsive-table">
            <TableView Items="CaseList" Context="caseEntity">
                <HeaderTemplate>
                    <th>Client Type</th>
                    <th>File Number</th>
                    <th>Client</th>
                    <th>Counter Part</th>
                    <th>Stage</th>
                    <th></th>
                </HeaderTemplate>
                <RowTemplate>
                    <td>@caseEntity.ClientType</td>
                    <td>@caseEntity.FileNumber</td>
                    <td>
                        @foreach (var item in caseEntity.Clients)
                        {
                        <li style="list-style-type: none;">@(!String.IsNullOrEmpty(item.FirstName) ? $"{item.FirstName} {item.LastName}" : $"{item.BusinessName}")</li>
                        }
                    </td>
                    <td>
                        @foreach (var item in caseEntity.CounterParts)
                        {
                            <li style="list-style-type: none;">@($"{item.Name}")</li>
                        }
                    </td>
                    <td>@caseEntity.Stage</td>
                    <td class="text-end">
                        <AuthorizeView>
                            <Authorized>
                                <button title="Events" class="btn btn-primary btn-sm" @onclick="@(() => Navigation.NavigateTo($"/case-event-insert/{caseEntity.Id}"))">
                                    <i class="bi bi-calendar-check"></i>
                                </button>
                                <button title="Details" class="btn btn-primary btn-sm" @onclick="@(() => Navigation.NavigateTo($"/case-detail/{caseEntity.Id}"))">
                                    <i class="bi bi-list-task"></i>
                                </button>
                                <button title="Edit" class="btn btn-primary btn-sm" @onclick="@(() => Navigation.NavigateTo($"/case-update/{caseEntity.Id}"))">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button title="Delete" class="btn btn-danger btn-sm" @onclick="@(() => ShowConfirmationModal(caseEntity.Id))">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                </RowTemplate>
            </TableView>
        </div>

        <div class="row mt-3">
            <div class="col">
                <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
            </div>
        </div>
    }
    else
    {
        <NoItemsRedirect NoItemsMessage="You don't have any cases" RefPage="client-upsert" RefPageText="why not add one?" />
    }
}

@code {
    private bool showConfirmationDialog;
    private Guid caseId;
    private ElementReference myInput;
    private string searchTerm = "";

    public MetaData MetaData { get; set; } = new MetaData();
    public int PageNumber { get; set; } = 1;
    private int pageSize = 12;


    public ICollection<CaseVm> CaseList { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetCases();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await myInput.FocusAsync();
        }
    }

    private void ShowConfirmationModal(Guid id)
    {
        caseId = id;
        showConfirmationDialog = true;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                await CaseDataService.DeleteCase(caseId);

                await GetCases();
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The Case has been deleted successfully!");

            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
            }
        }
        showConfirmationDialog = false;
    }

    private async Task GetCases()
    {
        var pagingReponse = await CaseDataService.GetCases(PageNumber, pageSize);
        CaseList = pagingReponse.Items;
        MetaData = pagingReponse.MetaData;
    }

    private async Task SelectedPage(int page)
    {
        PageNumber = page;
        await GetCases();
    }

    private void SearchForCase(KeyboardEventArgs args)
    {
        if (args.Key != "Enter") return;

        Navigation.NavigateTo($"/case/search/{searchTerm}");
    }
}
