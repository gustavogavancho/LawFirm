@page "/case-upsert"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject IClientDataService ClientDataService
@inject ICaseDataService CaseDataService
@inject IJSRuntime JsRuntime

<PageTitle>Upsert Case - Law Firm</PageTitle>

<SimpleNavigation BasePageRef="case" BasePage="Case" CurrentPage="Add" />

<EditForm Model="caseUpsert" OnValidSubmit="HandleValidSubmit">

    <MudThemeProvider />

    <FluentValidationValidator />

    <FormSection Title="Clients" HelpText="Individuals or entities seeking legal representation or advice.">

        <div class="row">
            <div class="col-sm-11">
                <MudAutocomplete T="ClientVm"
                                 @bind-Value="clientSelected"
                                 SearchFunc="@SearchClient"
                                 Label="Search client"
                                 ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                 AdornmentColor="Color.Primary"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 ToStringFunc="@(x => x == null ? null : string.IsNullOrWhiteSpace(x.FirstName) ? x.BusinessName : x.FirstName + " " + x.LastName )" />
            </div>

            <div class="col-sm-1 d-flex align-items-center">
                <button type="button" title="addClient" class="btn btn-primary" @onclick="AddClient">
                    <i class="bi bi-plus-square-fill"></i>
                </button>
            </div>
        </div>

        <div class="mt-3">
            @if (!clients.Any())
            {
                <div class="no-client-list">
                    <span class="client-nit">No clients selected</span>
                </div>
            }
            @foreach (var clientItem in clients)
            {
                <div class="client-list">
                    @(string.IsNullOrWhiteSpace(clientItem.BusinessName) ? $"{clientItem.FirstName} {clientItem.LastName}" : $"{clientItem.BusinessName}")
                    <span class="client-nit">@clientItem.Nit</span>
                    <button type="button" class="delete-client" @onclick="@(() => RemoveClient(clientItem))">x</button>
                </div>
            }
        </div>

    </FormSection>

    <EditForm Model="counterPart" OnValidSubmit="HandleChildValidSubmit">
        <ChildContent Context="innerContext">
            <FluentValidationValidator />
            <FormSection Title="Counterparts" HelpText="In litigation, the counterpart of a case is the opposing side.">
                <div class="row">
                    <div class="col-6">
                        <label for="counterPartName" class="form-label text-muted"><b>Name</b></label>
                        <InputText @bind-Value="counterPart.Name" class=" form-control" id="counterPartName" />
                        <ValidationMessage For="@(() => counterPart.Name)" />
                    </div>
                    <div class="col-5">
                        <label for="counterPartNit" class="form-label text-muted"><b>Nit</b></label>
                        <InputNumber @bind-Value="counterPart.Nit" class=" form-control" id="counterPartNit" />
                        <ValidationMessage For="@(() => counterPart.Nit)" />
                    </div>
                    <div class="col-1" style="margin-top:31px;">
                        <button title="addCounterPart" class="btn btn-primary">
                            <i class="bi bi-plus-square-fill"></i>
                        </button>
                    </div>
                </div>
                <div class="mt-3">
                    @if (!counterParts.Any())
                    {
                        <div class="no-client-list">
                            <span class="client-nit">No counter parts selected</span>
                        </div>
                    }
                    @foreach (var counterPartToAdd in counterParts)
                    {
                        <div class="client-list">
                            @counterPartToAdd.Name
                            <span class="client-nit">@counterPartToAdd.Nit</span>
                            <button type="button" class="delete-client" @onclick="@(() => RemoveCounterPart(counterPartToAdd))">x</button>
                        </div>
                    }
                </div>
            </FormSection>
        </ChildContent>
    </EditForm>

     <FormSection Title="Details" HelpText="Details of the client case.">
        <FormFieldSet Width="col-11">
            <label for="fileNumber" class="form-label text-muted"><b>File Number</b></label>
            <InputText @bind-Value="caseUpsert.FileNumber" class=" form-control" id="fileNumber" />
            <ValidationMessage For="@(() => caseUpsert.FileNumber)" />
        </FormFieldSet>
     </FormSection>

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Navigation.NavigateTo("case"))">Cancel</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private CreateCaseCommand caseUpsert = new();
    private ClientVm clientSelected;
    private List<ClientVm> clients = new();
    private CounterPartVm counterPart = new();
    private List<CounterPartVm> counterParts = new();

    private void HandleChildValidSubmit()
    {
        counterParts.Add(counterPart);
        counterPart = new();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!clients.Any())
            {
                await JsRuntime.InvokeVoidAsync("showWarningToastr", "You must select a client.");
                return;
            }

            if (!counterParts.Any())
            {
                await JsRuntime.InvokeVoidAsync("showWarningToastr", "You must select a counter part.");
                return;
            }

            caseUpsert.Ids = clients.Select(x => x.Id).ToList();
            caseUpsert.CounterParts = counterParts;

            var caseCreated = await CaseDataService.CreateCase(caseUpsert);

            if (caseCreated is not null)
            {
                await JsRuntime.InvokeVoidAsync("showSuccessToastr", "The client has been added successfully!");
                clients = new();
                counterParts = new();
                clientSelected = null;
                caseUpsert = new();
            }
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("showErrorToastr", "Something went wrong, please try again or contact your supplier.");
        }
        await JsRuntime.InvokeVoidAsync("scrollUtils.scrollToTop");
    }

    private async Task<IEnumerable<ClientVm>> SearchClient(string valor)
    {
        return await ClientDataService.FindClientsBySearchTerm(valor);
    }

    private void AddClient()
    {
        if(clientSelected is not null && !clients.Any(x => x.Id == clientSelected.Id))
        {
            clients.Add(clientSelected);
        }
    }

    private void RemoveClient(ClientVm client)
    {
        clients.Remove(client);
    }

    private void RemoveCounterPart(CounterPartVm counterPart)
    {
        counterParts.Remove(counterPart);
    }
}
