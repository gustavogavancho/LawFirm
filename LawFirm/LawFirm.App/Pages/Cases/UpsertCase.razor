@page "/case-upsert"

@inject NavigationManager Navigation
@inject IClientDataService ClientDataService
@inject ICaseDataService CaseDataService
@inject IJSRuntime JsRuntime

@attribute [Authorize]

<PageTitle>Upsert Case - Law Firm</PageTitle>

<div class="alert alert-secondary">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb" style="margin-bottom: 0;">
            <li class="breadcrumb-item"><a class="font-weight-bold link-dark" href="case">Case</a></li>
            <li class="breadcrumb-item active" aria-current="page">Add</li>
        </ol>
    </nav>
</div>

@if (SubmitSuccessful)
{
    <Alert Message="The client has been added successfully!" AlertType="success" />
}
else if (errorMessage is not null)
{
    <Alert Message="@errorMessage" AlertType="danger" />
}

<EditForm Model="caseUpsert" OnValidSubmit="HandleValidSubmit">

    <FluentValidationValidator />

    <FormSection Title="Clients" HelpText="Individuals or entities seeking legal representation or advice.">

        <div class="row">
            <div class="col-sm-11">
                <MudAutocomplete T="ClientVm"
                                 @bind-Value="clientSelected"
                                 SearchFunc="@SearchClient"
                                 Label="Search client"
                                 ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                 AdornmentColor="Color.Primary"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 ToStringFunc="@(x => x == null ? null : string.IsNullOrWhiteSpace(x.FirstName) ? x.BusinessName : x.FirstName + " " + x.LastName )" />
            </div>

            <div class="col-sm-1 d-flex align-items-center">
                <button type="button" title="addClient" class="btn btn-primary" @onclick="AddClient">
                    <i class="bi bi-plus-square-fill"></i>
                </button>
            </div>
        </div>

        <div class="responsive-table">
            <TableView Items="clients" Context="client">
                <HeaderTemplate>
                    <th>Client Type</th>
                    <th>Firt Name</th>
                    <th>Last Name</th>
                    <th>Nit</th>
                    <th>Business Name</th>
                    <th>Representative</th>
                    <th></th>
                </HeaderTemplate>
                <RowTemplate>
                    <th scope="col">@client.ClientType</th>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Nit</td>
                    <td>@client.BusinessName</td>
                    <td>@client.Representative</td>
                    <td>
                        <button title="Delete" class="btn btn-danger" @onclick="@(() => RemoveClient(client))">
                            <i class="bi bi-trash3"></i>
                        </button>
                    </td>
                </RowTemplate>
            </TableView>
        </div>

    </FormSection>

     <FormSection Title="Details" HelpText="Details of the client case.">
        <FormFieldSet Width="col-11">
            <label for="fileNumber" class="form-label text-muted"><b>File Number</b></label>
            <InputText @bind-Value="caseUpsert.FileNumber" class=" form-control" id="fileNumber" />
            <ValidationMessage For="@(() => caseUpsert.FileNumber)" />
        </FormFieldSet>
     </FormSection>

    <div class="mt-4 mb-2">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Navigation.NavigateTo("case"))">Cancel</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private CreateCaseCommand caseUpsert = new();
    private ClientVm clientSelected;
    private List<ClientVm> clients = new();
    private bool SubmitSuccessful;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        caseUpsert.Ids = clients.Select(x => x.Id).ToList();

        var caseCreated = await CaseDataService.CreateCase(caseUpsert);

        if (caseCreated is not null)
        {
            SubmitSuccessful = true;
            clients = new();
            clientSelected = null;
            caseUpsert = new();
        }
        else
        {
            SubmitSuccessful = false;
            errorMessage = "There was a problem saving your tickets.";
        }
    }

    private async Task<IEnumerable<ClientVm>> SearchClient(string valor)
    {
        return await ClientDataService.FindClientsBySearchTerm(valor);
    }

    private void AddClient()
    {
        if(clientSelected is not null && !clients.Any(x => x.Id == clientSelected.Id))
        {
            clients.Add(clientSelected);
        }
    }

    private void RemoveClient(ClientVm client)
    {
        clients.Remove(client);
    }
}
